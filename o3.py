#!/usr/bin/env python3
"""
OverlayAgent — a Spotlight‑style command bar for macOS
====================================================

A tiny Python app that floats above all windows when you hit a global
shortcut (⌘⇧Space by default). Type what you want your Mac to do, and the
agent will **first print the AppleScript** that performs the task and
then immediately execute it.

Why was it crashing?
--------------------
1. **rumps.hotkey** isn’t present in every build of *rumps* even though
   you upgraded to 0.4.0, so our detection fell back to the *pynput*
   listener.
2. *pynput* invokes callbacks on a background thread, but Cocoa UI must
   be created **on the main thread** — hence the
   `NSWindow should only be instantiated on the main thread` crash when
   we tried to pop the input window.

This rewrite fixes both issues:
* **Better hot‑key detection.** We test for the attribute instead of the
  sub‑module import. If the proper hook still isn’t there, we fall back
  as before, but without printing the confusing “upgrade” message.
* **Thread‑safe fallback.** A tiny `queue.Queue()` + a rumps *Timer*
  drains UI tasks on the main thread, so even when *pynput* fires in a
  worker thread we stay within Cocoa’s rules.

Run:
```bash
pip install rumps pynput pyobjc
python overlay_agent.py   # then hit ⌘⇧Space
```

(If you later find a *rumps* build that exports `rumps.hotkey.HotKey`,
our primary registration branch will take over automatically.)
"""
from __future__ import annotations

import os
import queue
import subprocess
import sys
import textwrap
from typing import Callable, Set

import rumps
from AppKit import NSApplication  # PyObjC gives us the real NSApplication

HOTKEY = "command+shift+space"   # ⇧⌘Space, Spotlight‑like
APP_NAME = "OverlayAgent"        # Mandatory for rumps.App


# ---------------------------------------------------------------------------
# Utility: bring the application window to the foreground
# ---------------------------------------------------------------------------

def _activate_app():
    """Make sure our floating input window is frontmost."""
    NSApplication.sharedApplication().activateIgnoringOtherApps_(True)


# ---------------------------------------------------------------------------
# Main App
# ---------------------------------------------------------------------------


class OverlayAgent(rumps.App):
    """Minimal Spotlight‑like command bar implemented with **rumps**."""

    def __init__(self):
        super().__init__(APP_NAME, quit_button=None)

        # Hide all traces in the menu‑bar / Dock
        self.title = ""
        self.icon = None

        # Queue for UI tasks that *must* run on the main thread
        self._ui_queue: "queue.Queue[Callable[[], None]]" = queue.Queue()
        rumps.Timer(self._drain_ui_queue, 0.05).start()  # 20 Hz poll

        # Hot‑key registration → native first, fallback to pynput
        if not self._register_hotkey_rumps():
            self._register_hotkey_pynput()

        # Header prepended to every generated AppleScript
        self.applescript_header = "-- Generated by OverlayAgent\n"

    # ------------------------------------------------------------------
    # Queue helper
    # ------------------------------------------------------------------
    def _drain_ui_queue(self, _):  # noqa: D401, ANN001
        while True:
            try:
                func = self._ui_queue.get_nowait()
            except queue.Empty:
                break
            func()

    def _enqueue_ui(self, func: Callable[[], None]):
        self._ui_queue.put(func)

    # ------------------------------------------------------------------
    # Hot‑key registration (primary): rumps ≥ 0.3.0 with HotKey attr
    # ------------------------------------------------------------------
    def _register_hotkey_rumps(self) -> bool:
        HotKey = getattr(getattr(rumps, "hotkey", None), "HotKey", None)
        if HotKey is None:
            return False
        self._hotkey = HotKey(key=HOTKEY, callback=lambda _: self._trigger())  # noqa: S301
        return True

    # ------------------------------------------------------------------
    # Hot‑key registration (fallback): pynput (thread‑safe via queue)
    # ------------------------------------------------------------------
    def _register_hotkey_pynput(self):
        try:
            from pynput import keyboard  # heavy import, delay until needed
        except ImportError:
            print(
                "❌  pynput isn’t installed — global hot‑key disabled!\n"
                "    Install with: pip install pynput",
                file=sys.stderr,
            )
            return

        COMBO: Set[object] = {
            keyboard.Key.cmd,
            keyboard.Key.shift,
            keyboard.Key.space,
        }
        pressed: Set[object] = set()

        def on_press(key):  # noqa: ANN001
            pressed.add(key)
            if pressed == COMBO:
                self._enqueue_ui(self._trigger)

        def on_release(key):  # noqa: ANN001
            pressed.discard(key)

        listener = keyboard.Listener(
            on_press=on_press,
            on_release=on_release,
            daemon=True,
        )
        listener.start()

    # ------------------------------------------------------------------
    # End‑to‑end flow once a hot‑key fires
    # ------------------------------------------------------------------
    def _trigger(self):  # always on main thread
        _activate_app()
        self._show_input()

    def _show_input(self):
        window = rumps.Window(
            title="OverlayAgent",
            message="Describe what you want your Mac to do:",
            default_text="",
            ok="Run",
            cancel="Cancel",
            dimensions=(480, 24),
        )
        response = window.run()
        if response.clicked:
            query = response.text.strip()
            if query:
                self._handle_query(query)

    # ------------------------------------------------------------------
    # CORE LOGIC
    # ------------------------------------------------------------------
    def _handle_query(self, query: str):
        script_body = self._nl_to_applescript(query)
        script = self.applescript_header + script_body

        banner = (
            "\n" + "=" * 60 + "\nRunning AppleScript for: " + query + "\n" + "=" * 60
        )
        print(banner)
        print(script)
        self._run_applescript(script)

    # ------------------------------------------------------------------
    # NATURAL‑LANGUAGE → APPLESCRIPT (stub + optional OpenAI call)
    # ------------------------------------------------------------------
    def _nl_to_applescript(self, query: str) -> str:
        key = query.lower()
        canned = {
            "open safari": 'tell application "Safari" to activate',
            "show downloads folder": textwrap.dedent(
                """
                tell application "Finder"
                    open (path to downloads folder)
                    activate
                end tell
                """,
            ).strip(),
            "mute volume": "set volume output muted true",
            "unmute volume": "set volume output muted false",
        }
        if key in canned:
            return canned[key]

        # Uncomment for GPT‑powered translation (needs OPENAI_API_KEY)
        # import openai
        # openai.api_key = os.getenv("OPENAI_API_KEY")
        # prompt = (
        #     "Translate the following macOS user request into pure AppleScript. "
        #     "Return only executable code, no explanations.\n\n" + query
        # )
        # response = openai.ChatCompletion.create(
        #     model="gpt-4o-mini",
        #     messages=[{"role": "user", "content": prompt}],
        #     temperature=0.0,
        # )
        # return response.choices[0].message["content"].strip()

        return f'display alert "Sorry, I don\'t know how to: {query}"'

    # ------------------------------------------------------------------
    # EXECUTION helper
    # ------------------------------------------------------------------
    @staticmethod
    def _run_applescript(script: str):
        subprocess.run(["osascript", "-e", script], check=False)


if __name__ == "__main__":
    os.environ["PYTHONOPTIMIZE"] = "1"
    OverlayAgent().run()
